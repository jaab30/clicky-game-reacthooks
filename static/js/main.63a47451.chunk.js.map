{"version":3,"sources":["components/Container.js","components/Test.js","pages/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Test","props","onClick","handleClick","name","src","image","alt","MainPage","useState","friends","people","setPeople","filtered","setFiltered","shuffle","a","i","length","j","Math","floor","random","console","log","useEffect","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8/BAeeA,MAZf,YAAiC,IAAZC,EAAW,EAAXA,SAGjB,OACI,yBAAKC,UAAU,aAAaD,I,iBCarBE,MAjBf,SAAcC,GAGV,OAGQ,yBAAKC,QAAS,WAAOD,EAAME,gBACvB,qCAAWF,EAAMG,MACjB,yBAAKC,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMG,SC0GnCI,MA1Gf,WAAqB,IAAD,EAEYC,mBAASC,GAFrB,mBAETC,EAFS,KAEDC,EAFC,OAGgBH,mBAASC,GAHzB,mBAGTG,EAHS,KAGCC,EAHD,OAIcL,mBAAS,IAJvB,gCAKaA,mBAAS,KALtB,mBAOVM,GAPU,UAOA,SAACC,GACb,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAEnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAFP,EAGpB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAHgC,KAG5BD,EAAEG,GAH0B,KAKvC,OAAOH,IAELb,EAAc,WAChBoB,QAAQC,IAAI,OAEbT,EAAQJ,GAEPG,EAAYH,IAwEhB,OApEAc,qBAAU,WACNF,QAAQC,IAAI,UACZT,EAAQJ,GACRC,EAAUD,KACX,CAACA,IAiEA,kBAAC,EAAD,KACGE,EAASa,KAAI,SAAAC,GAAI,OACd,kBAAC,EAAD,CACAvB,KAAMuB,EAAKvB,KACXE,MAAOqB,EAAKrB,MACZH,YAAaA,SCnGZyB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63a47451.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Container({ children }){\r\n\r\n\r\n    return (\r\n        <div className=\"container\">{children}</div>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\n\r\nfunction Test(props) {\r\n\r\n\r\n    return (\r\n\r\n        \r\n            <div onClick={() => {props.handleClick()}}>\r\n                <h2>Name: {props.name}</h2>\r\n                <img src={props.image} alt={props.name}/>\r\n            </div>\r\n        \r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Test;","import React,  { useState, useEffect } from \"react\";\r\n// import React from \"react\";\r\nimport Container from \"../../components/Container\";\r\nimport Jumbotron from \"../../components/Jumbotron\";\r\nimport Search from \"../../components/Search\";\r\nimport { Table, Thead, Th, Tbody, Tr, Td } from \"../../components/Table\";\r\nimport API from \"../../utils/API\";\r\nimport friends from \"./../../characters.json\"\r\nimport Test from \"../../components/Test\"\r\n\r\n\r\nfunction MainPage() {\r\n\r\n    const [people, setPeople] = useState(friends);\r\n    const [filtered, setFiltered] = useState(friends);\r\n    const [sortAsc, setSortAsc] = useState([]);\r\n    const [search, setSearch ] = useState(\"\")\r\n\r\n    const shuffle = (a) => {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n    \r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        return a;\r\n      }\r\n    const handleClick = () => {\r\n        console.log(\"yes\");\r\n        \r\n       shuffle(people)\r\n        // console.log(people);\r\n        setFiltered(people)\r\n        // setPeople(people)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"effect\");\r\n        shuffle(people)\r\n        setPeople(people)\r\n    }, [people], )\r\n    // const getRandomPeople = () => {\r\n    //     API.getPeople()\r\n    //         .then(data => {\r\n    //             setPeople(data.data.results)\r\n    //             setFiltered(data.data.results)\r\n    //         })\r\n    //         .catch(err => { console.log(err);\r\n    //         })\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     getRandomPeople()\r\n    // }, [])\r\n    \r\n    // const sortByFirstName = () => {\r\n        \r\n    //     if (sortAsc){\r\n    //         filtered.sort((a, b) => (b.name.first > a.name.firts) ? 1 : -1)\r\n    //         shuffle(filtered)\r\n    //         setSortAsc(false)\r\n          \r\n    //     } else {\r\n    //         // filtered.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n    //         shuffle(filtered)\r\n    //         setSortAsc(true)\r\n    //     }\r\n    //     setFiltered(filtered)\r\n    // }\r\n    // const sortByLastName = () => {\r\n        \r\n    //     if (sortAsc){\r\n    //         filtered.sort((a, b) => (b.name.last > a.name.last) ? 1 : -1)\r\n    //         setSortAsc(false)\r\n    //     } else {\r\n    //         filtered.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1)\r\n    //         setSortAsc(true)\r\n    //     }\r\n    //     setFiltered(filtered)\r\n    // }\r\n\r\n    // const sortByAge = () => {\r\n        \r\n    //     if (sortAsc){\r\n    //         filtered.sort((a, b) => (b.name.last > a.name.last) ? 1 : -1)\r\n    //         setSortAsc(false)\r\n    //     } else {\r\n    //         filtered.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1)\r\n    //         setSortAsc(true)\r\n    //     }\r\n    //     setFiltered(filtered)\r\n    // }\r\n\r\n    // const onChangeHandler = e => {\r\n        \r\n    //     setSearch(e.target.value)\r\n    //     let peopleSearch = people.filter(item => {\r\n    //         let values = item.name.last.toLowerCase();\r\n    //         return ( values.indexOf(e.target.value) !== -1 ) \r\n    //     })\r\n    //     setFiltered(peopleSearch)\r\n    // }\r\n\r\n\r\n    return (\r\n        <Container>\r\n          {filtered.map(item => (\r\n              <Test \r\n              name={item.name}\r\n              image={item.image}\r\n              handleClick={handleClick}\r\n              />\r\n          ))}\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default MainPage;\r\n","import React from 'react';\nimport './App.css';\nimport MainPage from \"./pages/MainPage\"\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}