{"version":3,"sources":["components/CharactersComp/index.js","components/DisplayComp/index.js","components/HeaderComp/index.js","components/NavComp/index.js","pages/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["CharactersComp","props","onClick","handleClick","id","className","classShake","alt","name","src","image","DisplayComp","children","HeaderComp","header1","NavComp","counter","topScore","MainPage","useState","charactersMain","characters","setcharacters","currentScore","setCurrentScore","setTopScore","chosenGroup","setChosenGroup","message","setMessage","setClassShake","chosenFriend","shuffle","a","i","length","j","Math","floor","random","chosenArray","map","item","indexOf","filter","character","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6kCAmBeA,MAhBf,SAAwBC,GAEtB,OACE,yBAAKC,QAAS,kBAAMD,EAAME,YAAYF,EAAMG,KAAKC,UAAS,6BAAwBJ,EAAMK,aACtF,yBAAKD,UAAU,UACb,yBAAKE,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,SAEnC,yBAAKL,UAAU,WACb,2BACGJ,EAAMO,S,MCHFG,MANf,SAAqBV,GACnB,OAAO,yBAAKI,UAAU,iBACpB,yBAAKA,UAAU,eAAeJ,EAAMW,Y,MCGzBC,MALf,SAAoBZ,GAClB,OAAO,yBAAKI,UAAU,SACpB,4BAAMJ,EAAMa,W,MCODC,MATf,SAAiBd,GACf,OAAO,4BAAQG,GAAG,SAASC,UAAU,gBACnC,uBAAGA,UAAU,SAAb,WAA8BJ,EAAMe,SACpC,yBAAKX,UAAU,kBACb,yBAAKI,IAAI,4BAA4BJ,UAAU,SAASE,IAAI,uBAA2B,wBAAIF,UAAU,aAAd,mBACzF,uBAAGA,UAAU,YAAb,eAAqCJ,EAAMgB,Y,OCsEhCC,MAvEf,WAAoB,IAAD,EAEqBC,mBAASC,GAF9B,mBAERC,EAFQ,KAEIC,EAFJ,OAGyBH,mBAAS,GAHlC,mBAGRI,EAHQ,KAGMC,EAHN,OAIiBL,mBAAS,GAJ1B,mBAIRF,EAJQ,KAIEQ,EAJF,OAKuBN,mBAASC,GALhC,mBAKRM,EALQ,KAKKC,EALL,OAMeR,mBAAS,4EANxB,mBAMRS,EANQ,KAMCC,EAND,OAOqBV,mBAAS,YAP9B,mBAORb,EAPQ,KAOIwB,EAPJ,KAST3B,EAAc,SAACC,GACnB2B,EAAa3B,GACb4B,EAAQX,GACRC,EAAc,YAAID,KAGdW,EAAU,SAACC,GACf,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADP,EAEpB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFgC,KAE5BD,EAAEG,GAF0B,KAIzC,OAAOH,GAGDF,EAAe,SAAA3B,GACjB0B,EAAc,YACd,IAAIU,EAAcd,EAAYe,KAAI,SAAAC,GAAI,OAAKA,EAAKtC,OAClB,IAA7BoC,EAAYG,QAAQvC,IACrB0B,EAAc,WACdH,EAAeN,GACfG,EAAgB,GAChBC,EAAYR,GACZY,EAAW,gCAEXW,EAAcd,EAAYkB,QAAO,SAAAC,GAAS,OAAIA,EAAUzC,KAAOA,KAC/DuB,EAAea,GACfhB,EAAgBD,EAAe,GAC/BM,EAAW,uCAGTJ,EADCR,EAAWM,EACAN,EAEAM,EAAe,KAKjC,OACE,6BACE,kBAAC,EAAD,CACAP,QAASO,EACTN,SAAUA,IAET,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAYH,QAASc,IACpBP,EAAWoB,KAAI,SAAAI,GACf,OACC,kBAAC,EAAD,CACE1C,YAAaA,EACbC,GAAIyC,EAAUzC,GACd0C,IAAKD,EAAUzC,GACfI,KAAMqC,EAAUrC,KAChBE,MAAOmC,EAAUnC,MACjBJ,WAAYA,UC9DbyC,MADf,WAAgB,OAAO,kBAAC,EAAD,OCMHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77d24337.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CharactersComp(props) {\n  \n  return (\n    <div onClick={() => props.handleClick(props.id)} className={`characterContainer ${props.classShake}`}>\n      <div className=\"imgDiv\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <p>\n          {props.name}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default CharactersComp;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction DisplayComp(props) {\n  return <div className=\"mainContainer\">\n    <div className=\"displayComp\">{props.children}</div>\n  </div>;\n}\n\nexport default DisplayComp;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction HeaderComp(props) {\n  return <div className=\"title\">\n    <h2 >{props.header1}</h2>\n  </div>\n}\nexport default HeaderComp;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction NavComp(props) {\n  return <header id=\"navbar\" className=\"navContainer\">\n    <p className=\"score\">Score = {props.counter}</p>\n    <div className=\"titleContainer\">\n      <img src=\"./assets/img/sslogov1.png\" className=\"sslogo\" alt=\"Sesame Street Logo\"></img><h2 className=\"gameTitle\"> Clicky - Game</h2></div>\n    <p className=\"topScore\">Top Score = {props.topScore}</p>\n  </header>;\n}\n\nexport default NavComp;\n","import React, { useState } from 'react';\r\nimport CharactersComp from \"../../components/CharactersComp\";\r\nimport DisplayComp from \"../../components/DisplayComp\";\r\nimport HeaderComp from \"../../components/HeaderComp\";\r\nimport NavComp from \"../../components/NavComp\";\r\nimport charactersMain from \"../../characters.json\";\r\n\r\nfunction MainPage(){\r\n\r\n    const [characters, setcharacters] = useState(charactersMain);\r\n    const [currentScore, setCurrentScore] = useState(0);\r\n    const [topScore, setTopScore] = useState(0);\r\n    const [chosenGroup, setChosenGroup] = useState(charactersMain);\r\n    const [message, setMessage] = useState(\"Click on an image to earn points. But don't click on any more than once!\");\r\n    const [classShake, setClassShake] = useState(\"shakeOff\")\r\n  \r\n    const handleClick = (id) => {\r\n      chosenFriend(id)\r\n      shuffle(characters);\r\n      setcharacters([...characters])\r\n    }\r\n   \r\n    const shuffle = (a) => {\r\n      for (let i = a.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [a[i], a[j]] = [a[j], a[i]];\r\n      }\r\n    return a;\r\n    }\r\n  \r\n    const chosenFriend = id => {\r\n        setClassShake(\"shakeOff\")\r\n        let chosenArray = chosenGroup.map(item => (item.id));\r\n      if(chosenArray.indexOf(id) === -1){\r\n        setClassShake(\"shakeOn\")\r\n        setChosenGroup(characters);\r\n        setCurrentScore(0);\r\n        setTopScore(topScore);\r\n        setMessage(\"You guessed incorrectly..!\")\r\n      } else {\r\n        chosenArray = chosenGroup.filter(character => character.id !== id)\r\n        setChosenGroup(chosenArray);\r\n        setCurrentScore(currentScore + 1);\r\n        setMessage(\"You guessed correctly..! Try Again.\")\r\n  \r\n        if(topScore > currentScore){\r\n          setTopScore(topScore);\r\n        } else {\r\n          setTopScore(currentScore + 1);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <NavComp\r\n        counter={currentScore}\r\n        topScore={topScore}\r\n        />\r\n         <DisplayComp>\r\n            <HeaderComp header1={message} />\r\n            {characters.map(character => {\r\n             return(\r\n              <CharactersComp\r\n                handleClick={handleClick}\r\n                id={character.id}\r\n                key={character.id}\r\n                name={character.name}\r\n                image={character.image}\r\n                classShake={classShake}\r\n              />\r\n            )})}\r\n          </DisplayComp>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from \"./pages/MainPage\"\n\n\n\nfunction App() {return <MainPage/>}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}